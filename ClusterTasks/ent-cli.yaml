apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: ent-cli
spec:
  description: >-
    This Task will install an Entando bundle in the targer cluster's namespace. By installing we mean that the 
    Entando bundle will show up in the Hub catalog.
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with a private key, known_hosts, config, etc. Copied to the user's home before git commands
        are executed. Used to authenticate with the git remote when performing the clone. Binding a Secret to this 
        Workspace is strongly recommended over other volume types.
    - name: source
  params:
    - name: ENTANDO_APP_NAME
      type: string
      description: The Entando app name
      default: "quickstart"
    - name: ENT_IMAGE
      type: string
      description: The image providing the ent binary that this Task runs.
      default: docker.io/entando/ent:v7.2.2_k8s_1_26_11_patch-https
    - name: NAMESPACE
      type: string
      description: The namespace of the cluster where the bundle should be installed.
      default: "$(params.NAMESPACE)"
    - name: DOCKER_ORG
      type: string
      description: The name of your docker organization
      default: "entando"
    - name: DOCKER_REGISTRY
      type: string
      description: The docker registry type (docker.io, quay.io, gcr.io, etc...)
      default: "quay.io"
    - name: CONTEXT_DIR
      type: string
      description: >-
        The context directory within the source workspace where we want to execute ent goals.
      default: "./"
    - name: SCRIPT
      description: The ent cli script to run
      type: string
      default: ""
    - name: ARGS
      description: The ent cli arguments to run
      type: array
      default:
        - ""
  steps:
    - name: ent
      image: $(params.ENT_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      script: |
        #!/usr/bin/env bash
        set -eux
        
        echo "$(params.CONTEXT_DIR)"

        $(params.SCRIPT)

      args:
        - "$(params.ARGS)"

# This part has been added to manage the auto-signed certificate for the internal docker registry
# So we need to mount the /etc/ssl/certs directory
#      volumeMounts:
#        - name: ca-certs
#          mountPath: /etc/ssl/certs/
#          readOnly: true
#      securityContext:
#        runAsNonRoot: true
#        runAsUser: 65532
#        allowPrivilegeEscalation: true
#  volumes:
#    - name: ca-certs
#      hostPath:
#        path: /etc/ssl/certs
